function getCameraItems(width) {
  var cameras = [
    ["camera.front_door_exterior", "Font Door"],
    ["camera.garage_exterior", "Garage Exterior"],
    ["camera.garage", "Garage"],
    ["camera.backyard", "Backyard"],
  ];
  var items = [];
  for (var i = 0; i < cameras.length; i++) {
    items.push({
      position: [0, i],
      width: width,
      height: 1,
      type: TYPES.CAMERA,
      refresh: 3000,
      title: cameras[i][1],
      id: cameras[i][0],
      fullscreen: {
        type: TYPES.CAMERA_STREAM,
        objFit: "contain",
      },
    });
  }
  return items;
}

function getLightItems(width) {
  var items = [
    {
      position: [0, 0],
      width: width,
      title: "Turn Off Lights",
      id: "scene.lights_off",
      // TODO: switch to 'group' icon when mdi is updated
      icon: "mdi-lightbulb-off",
      type: TYPES.SCENE,
      state: false,
    },
  ];
  var lights = [
    ["light.master_bedroom_lights", "Master Bd"],
    ["light.guest_bedroom_lights", "Guest Bd"],
    ["light.hallway_lights", "Hallway"],
    ["light.office_lights", "Office"],
    ["light.dining_room_lights", "Dining"],
    ["light.kitchen_lights", "Kitchen"],
    ["light.entrance_lights", "Entryway"],
    ["light.front_door_lights", "Front Door"],
  ];
  var lightWidth = 1;
  var lightHeight = 0.5;
  for (var i = 0; i < lights.length; i++) {
    items.push({
      position: [
        (i * lightWidth) % width,
        1 + Math.floor((i * lightWidth) / width) * lightHeight,
      ],
      width: lightWidth,
      height: lightHeight,
      title: lights[i][1],
      id: lights[i][0],
      type: TYPES.LIGHT,
      states: {
        on: "On",
        off: "Off",
      },
      icons: {
        on: "mdi-lightbulb-on",
        off: "mdi-lightbulb",
      },
      sliders: [
        {
          title: "Brightness",
          field: "brightness",
          max: BRIGHTNESS_MAX,
          min: 0,
          step: BRIGHTNESS_STEP,
          request: {
            type: "call_service",
            domain: "light",
            service: "turn_on",
            field: "brightness",
          },
        },
      ],
    });
  }
  return items;
}

function getTileSize(groupWidth, tileMargin, groupMargin) {
  var width = isMobile ? Math.min(window.innerWidth, 600) : window.innerWidth;
  width -= groupMargin * 2 + tileMargin * (groupWidth - 1);
  return +(width / groupWidth).toFixed(1);
}

var suffix = location.protocol === "file:" ? "" : "?r=" + Math.random();
["theme.css"].map(function (value) {
  document.write(
    "<li" + 'nk rel="stylesheet" href="custom/' + value + suffix + '"/>'
  );
});

var isMobile = /[?&]mobile/.test(location.search) || window.innerWidth <= 600;

// optimize for 4:3
var gridWidth = isMobile ? 2 : 8;
var gridHeight = 4;

var groupWidth = gridWidth; // count of tiles horizontally
var tileMargin = 4; // px
var groupMargin = isMobile ? 20 : 56; // px

// 150 is default
var tileSize = getTileSize(groupWidth, tileMargin, groupMargin);

// Lutron lights
var BRIGHTNESS_STEP = 25.5;
var BRIGHTNESS_MAX = 255;

var customThemes = [CUSTOM_THEMES.TRANSPARENT];
var entitySize;
if (isMobile) {
  entitySize = ENTITY_SIZES.SMALL;
  customThemes.push(CUSTOM_THEMES.MOBILE);
} else {
  entitySize = ENTITY_SIZES.NORMAL;
}

var CONFIG = {
  customTheme: customThemes,
  transition: TRANSITIONS.ANIMATED_GPU,
  entitySize: entitySize,
  tileSize: tileSize,
  tileMargin: tileMargin,
  // groupMarginCss: tileMargin / 2 + "px",
  serverUrl: "http://" + location.hostname + ":8123",
  wsUrl: "ws://" + location.hostname + ":8123/api/websocket",
  authToken: "{{ tileboard_hass_token }}",
  googleApiKey: "{{ google_api_key }}",
  debug: false, // Prints entities and state change info to the console.
  pingConnection: true, //ping connection to prevent silent disconnections

  // next fields are optional
  events: [],
  timeFormat: 24,
  menuPosition: MENU_POSITIONS.LEFT, // or BOTTOM
  hideScrollbar: true, // horizontal scrollbar
  groupsAlign: GROUP_ALIGNS.HORIZONTALLY, // or VERTICALLY
  onReady: function () {},

  header: {
    left: [
      {
        type: HEADER_ITEMS.DATETIME,
        dateFormat: "EEEE, LLLL dd", // https://docs.angularjs.org/api/ng/filter/date
        styles: {
          margin: "0",
        },
      },
    ],
    right: [
      {
        type: HEADER_ITEMS.WEATHER,
        icon: "&weather.san_francisco_ca.state",
        icons: {
          sunny: "clear",
          cloudy: "cloudy",
          rain: "rain",
          sleet: "sleet",
          snow: "snow",
          wind: "hazy",
          fog: "fog",
          partlycloudy: "partlycloudy",
        },
        fields: {
          temperature: "&weather.san_francisco_ca.attributes.temperature",
          temperatureUnit: "F",
          windSpeed: "&weather.san_francisco_ca.attributes.wind_speed",
          windSpeedUnit: " mph",
        },
      },
    ],
  },

  pages: [
    {
      title: "Main page",
      bg: "images/bg1.jpeg",
      icon: "mdi-home-outline", // home icon
      groups: [
        {
          title: "",
          width: 2,
          height: gridHeight,
          items: [
            // {
            //   position: [0, 1],
            //   type: TYPES.DEVICE_TRACKER,
            //   id: "person.david",
            //   map: "yandex",
            //   states: {
            //     home: "Home",
            //     not_home: "Away",
            //     sentry_sfo: "Work",
            //   },
            //   zoomLevels: [9, 13], // or [9] for only one map slide
            //   hideEntityPicture: true, //hide entity pic, if you need only map
            //   slidesDelay: 2, // delay before first slide animation
            // },
            // {
            //   position: [1, 1],
            //   type: TYPES.DEVICE_TRACKER,
            //   id: "person.sukhpreet",
            //   map: "yandex",
            //   states: {
            //     home: "Home",
            //     not_home: "Away",
            //   },
            //   zoomLevels: [9, 13], // or [9] for only one map slide
            //   hideEntityPicture: true, //hide entity pic, if you need only map
            //   slidesDelay: 2, // delay before first slide animation
            // },
            {
              position: [0, 0],
              type: TYPES.DOOR_ENTRY,
              id: {},
              icon: "mdi-door",
              title: "Front Door",
              state: false,
              layout: {
                camera: {
                  type: TYPES.CAMERA,
                  id: "camera.front_door_exterior",
                  refresh: 1500,
                  bgSize: "cover",
                },
                page: {},
                tiles: [
                  // {
                  //   position: [0, 0],
                  //   theme: ITEM_TRANSPARENT,
                  //   type: TYPES.SWITCH,
                  //   id: "switch.intercom",
                  //   icons: {
                  //     on: "mdi-phone-in-talk",
                  //     off: "mdi-phone",
                  //   },
                  //   states: {
                  //     on: "Active",
                  //     off: "Idle",
                  //   },
                  // },
                  // {
                  //   position: [0, 1],
                  //   theme: ITEM_TRANSPARENT,
                  //   type: TYPES.SCRIPT,
                  //   id: "script.front_gate_open",
                  //   icons: {
                  //     on: "mdi-gate",
                  //     off: "mdi-gate",
                  //   },
                  //   state: false,
                  // },
                  {
                    position: [0, 0],
                    theme: ITEM_TRANSPARENT,
                    id: "light.garage_entry_can",
                    type: TYPES.SWITCH,
                    title: "Lights",
                    states: {
                      on: "On",
                      off: "Off",
                    },
                    icons: {
                      on: "mdi-lightbulb-on",
                      off: "mdi-lightbulb",
                    },
                  },
                ],
              },
            },
            {
              position: [1, 0],
              type: TYPES.ALARM,
              title: "Alarm",
              id: "alarm_control_panel.home",
              icons: {
                disarmed: "mdi-bell-off",
                pending: "mdi-bell",
                armed_home: "mdi-bell-plus",
                armed_away: "mdi-bell",
                triggered: "mdi-bell-ring",
              },
              states: {
                disarmed: "Disarmed",
                pending: "Pending",
                armed_home: "Armed home",
                armed_away: "Armed away",
                triggered: "Triggered",
              },
            },
            {
              position: [0, isMobile ? 1 : 3],
              type: TYPES.SWITCH,
              id: "switch.pi_hole",
              classes: ["-th-pi-hole"],
              title: "Pi Hole",
              states: {
                on: "Active",
                off: "Disabled for 60s",
              },
              icons: {
                on: "mdi-pi-hole",
                off: "mdi-pi-hole",
              },
            },
          ],
        },
        {
          title: "",
          width: 2,
          height: gridHeight,
          items: getLightItems(2),
        },
        {
          title: "",
          width: entitySize === ENTITY_SIZES.SMALL ? 2 : 4,
          height: gridHeight,
          items: getCameraItems(entitySize === ENTITY_SIZES.SMALL ? 2 : 4),
        },
      ],
    },
  ],
};
